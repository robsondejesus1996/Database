package br.udesc.tela;

import br.udesc.manipArq.CriadorTabela;
import br.udesc.manipArq.IntrodutorDadosTabela;
import br.udesc.manipArq.LeitorTabela;
import br.udesc.manipXml.LeitorXml;
import br.udesc.manipXml.ValidadorXml;
import br.udesc.model.Coluna;
import br.udesc.model.ColunaFloat;
import br.udesc.model.ColunaInt;
import br.udesc.model.ColunaString;
import br.udesc.model.ComandoSql;
import br.udesc.model.DataBase;
import br.udesc.model.Linha;
import br.udesc.model.Tabela;
import br.udesc.udescdb.SQLiteBaseListener;
import br.udesc.udescdb.SQLiteLexer;
import br.udesc.udescdb.SQLiteParser;
import br.udesc.utils.UtilArquivos;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CodePointCharStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

/**
 *
 * @author Robson de Jesus e Thiago Moraes Correia
 */
public class TelaDb extends javax.swing.JFrame {

    /**
     * Creates new form TelaDb
     */
    public TelaDb() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton1.setText("Executar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Adicionar Banco de dados");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Comando Sql");

        jButton3.setText("Importar Xml");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jButton1))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)
                                .addGap(23, 23, 23)))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * metodo que faz a acao de executar na tela identificando o tipo de comando
     * e chamando a classe responsavel
     *
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ComandoSql comando = ComandoSql.getInstance();
        String sql = jTextArea1.getText();
        sql = sql.trim();

        try {
            //interpretando o comando 
            CodePointCharStream inputStream = CharStreams.fromString(sql);
            SQLiteLexer lexer = new SQLiteLexer(inputStream);
            CommonTokenStream cts = new CommonTokenStream(lexer);
            SQLiteParser parser = new SQLiteParser(cts);
            parser.setBuildParseTree(true);
            ParseTree tree = parser.parse();

            ParseTreeWalker p = new ParseTreeWalker();
            p.walk(new SQLiteBaseListener(), tree);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro de sintaxe!");
            comando.limparDados();
            return;
        }
        //validadndo o comando
        if (!UtilArquivos.comandoValido()) {
            comando.limparDados();
            return;
        }
        //filtrando por operacao
        if (comando.getComando().equals("select")) {
            LeitorTabela leitor = new LeitorTabela();
            try {
                procesaDadosSelect(leitor.ler());
                comando.limparDados();
                return;
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Erro ao executar o select");
                comando.limparDados();
                return;
            }
        } else if (comando.getComando().equals("insert")) {
            IntrodutorDadosTabela intro = new IntrodutorDadosTabela();
            boolean inseriu = false;
            try {
                inseriu = intro.inserir();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Erro ao executar o insert");
                comando.limparDados();
                return;
            }
            if (inseriu) {
                JOptionPane.showMessageDialog(null, "registro inserido com sucesso");
            }
        } else if (comando.getComando().equals("create")) {
            boolean criouTabela = false;
            try {
                CriadorTabela criador = new CriadorTabela();
                criouTabela = criador.criarTabela();
                if (criouTabela) {
                    JOptionPane.showMessageDialog(null, "tabela criada com sucesso");
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao executar o create");
                comando.limparDados();
                return;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Comando Sql nao identificado");
        }
        comando.limparDados();
        jTextArea2.setText("[...]");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * metodo que faz a acao de cadastrar uma nova base de dados instanciando a
     * tela responsavel por esta funcao
     *
     * @param evt
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        CadDb telaCadastroDb = new CadDb();
        telaCadastroDb.setVisible(true);

    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * metodo responsval pelo botao de importar xml
     *
     * @param evt
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //selecionado arquivo
        fc.showOpenDialog(this);
        File arqXml = fc.getSelectedFile(); //arquivo xml selecionado

        if (ValidadorXml.validaXML(arqXml)) { //se o xml for valido
            LeitorXml leitor = new LeitorXml();
            IntrodutorDadosTabela intr = new IntrodutorDadosTabela();
            try {
                //lendo o xml
                List<DataBase> dbs = leitor.ler(arqXml);
                //inserindo os dados lidos
                for (DataBase db : dbs) {
                    intr.inserir(db);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao ler o XMl");
                return;
            }
            JOptionPane.showMessageDialog(null, "Registros inseridos com sucesso!");
        }


    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * metodo responsavel por fazer o print no textArea dos dados da tabela
     * selecionada
     *
     * @param tabela
     */
    private void procesaDadosSelect(Tabela tabela) {
        if (tabela == null) {
            return;
        }
        int tamString = obterMaiorTamColuna(tabela);
        String resultSelect = ""; //variavel que sera concatenada dinamicamente a tabela
        //tratando tamanho do cabecalho
        for (Coluna coluna : tabela.getColunasCabecalho()) {
            resultSelect += UtilArquivos.trataTamanhoStringEspacos(coluna.getNome(), tamString) + "| ";
        }
        resultSelect += "\n";
        //lendo as linhas com os dados
        for (Linha linha : tabela.getLinhas()) {
            for (Coluna coluna : linha.getColunas()) {
                //obtendo pelo tipo
                if (coluna instanceof ColunaInt) {
                    ColunaInt col = (ColunaInt) coluna;
                    resultSelect += UtilArquivos.trataTamanhoStringEspacos(col.getValor() + "", tamString) + "| ";

                } else if (coluna instanceof ColunaFloat) {
                    ColunaFloat col = (ColunaFloat) coluna;
                    resultSelect += UtilArquivos.trataTamanhoStringEspacos(col.getValor() + "", tamString) + "| ";

                } else if (coluna instanceof ColunaString) {
                    ColunaString col = (ColunaString) coluna;
                    resultSelect += UtilArquivos.trataTamanhoStringEspacos(col.getValor() + "", tamString) + "| ";
                }
            }
            resultSelect += "\n";
        }
        jTextArea2.setText(resultSelect);//setando na tela
    }

    /**
     * metodo para obter o tamanho de uma coluna que ira ocupar mais espaco na
     * tela
     *
     * @param tabela
     * @return
     */
    private int obterMaiorTamColuna(Tabela tabela) {
        int tamMax = 0;
        for (Linha linha : tabela.getLinhas()) {
            for (Coluna coluna : linha.getColunas()) {
                if (coluna.getTamanhoBytes() > tamMax) {
                    tamMax = coluna.getTamanhoBytes();
                }
            }
        }
        return tamMax;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaDb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaDb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaDb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaDb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaDb().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
